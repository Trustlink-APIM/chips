{
    "swagger": "2.0",
    "info": {
        "title": "CHIPS Authentication via API",
        "version": "1.0",
        "license": {
            "name": " Apache 2.0 License",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "termsOfService": " https://marketplace.trustlinkhosting.com",
        "contact": {
            "name": "API Sales",
            "url": "https://marketplace.trustlinkhosting.com",
            "email": "apisales@trustlink.co.za"
        },
        "description": "Exposes authentication of CHIPS users via direct API calls.\n\n# Features \n\n\n\n"
    },
    "host": "tar.sandbox.tlsag.net",
    "schemes": [
        "https"
    ],
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "paths": {
        "/pin/otp": {
            "parameters": [],
            "post": {
                "summary": "Request PIN reset OTP",
                "operationId": "chips-auth-api-pin-otp-post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "mobileNumber": {
                                    "type": "string",
                                    "description": "Mobile number in international format.",
                                    "example": "+27821231234",
                                    "pattern": "^+[0-9]*$",
                                    "maxLength": 15
                                }
                            },
                            "required": [
                                "mobileNumber"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP Generated and sent.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Request an OTP for a mobile number. The number will receive an SMS:\n\n```\nOTP: xxxxx\nYour CHIPS generated verification code\n```\n\nThe OTP can then be used with *POST /chips/auth/api/pin* to reset the CHIPS&reg; account PIN code.\n\n> **Sandbox testing**\n>\n> The OTP sent to the phone does incur costs. For testing to the sandbox, the number of calls to the endpoint is rate limited.\n> You can test with mobileNumbers starting with '+2785' to trigger a mockup success response.\n\n> **Storefront testing**\n> \n> All requests to the storefront OTP will return a mockup success response",
                "tags": [
                    "PIN Management"
                ]
            }
        },
        "/pin": {
            "parameters": [],
            "post": {
                "summary": "Set CHIPS&reg; Account PIN",
                "operationId": "chips-auth-api-pin-post",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                },
                "tags": [
                    "PIN Management"
                ],
                "description": "Reset the PIN for a CHIPS&reg; account.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "mobileNumber": {
                                    "type": "string",
                                    "description": "Mobile number in international format.",
                                    "example": "+27821231234",
                                    "pattern": "^+[0-9]*$",
                                    "maxLength": 15
                                }
                            },
                            "required": [
                                "mobileNumber"
                            ]
                        }
                    }
                ]
            }
        }
    },
    "definitions": {},
    "basePath": "/sandbox/chips/auth/api",
    "tags": [
        {
            "name": "Authentication"
        },
        {
            "name": "PIN Management"
        }
    ],
    "securityDefinitions": {},
    "buildtarget": "stoplight"
}