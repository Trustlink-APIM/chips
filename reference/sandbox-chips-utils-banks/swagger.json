{
    "swagger": "2.0",
    "x-stoplight": {
        "id": "luh1k4z8jnedj"
    },
    "info": {
        "title": "TPN Business Utilities",
        "version": "1.0",
        "license": {
            "name": " Apache 2.0 License",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "termsOfService": "https://marketplace.trustlinkhosting.com",
        "contact": {
            "name": "API Sales",
            "url": "https://marketplace.trustlinkhosting.com",
            "email": "apisales@trustlink.co.za"
        },
        "description": "The TPN Business Utilities API utilizes the TPN Payment Network to provide additional Utilities.\n\n# Features\n\n* List of supported banks"
    },
    "host": "apim.trustlinkhosting.com:8165",
    "schemes": [
        "https"
    ],
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "paths": {
        "/supportedbanks": {
            "get": {
                "summary": "List of Supported Banks",
                "tags": [
                    "EFT Payments"
                ],
                "responses": {
                    "200": {
                        "description": "List of Banks",
                        "schema": {
                            "type": "object",
                            "description": "",
                            "properties": {
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                },
                                "banks": {
                                    "type": "array",
                                    "items": {
                                        "description": "Bank Object",
                                        "allOf": [
                                            {
                                                "type": "object",
                                                "description": "Bank Object",
                                                "properties": {
                                                    "code": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "example": "ABSA",
                                                        "description": "Human readable enumerartor to uniquely identify a bank."
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "example": "Absa Bank Limited",
                                                        "description": "Name of the Bank."
                                                    },
                                                    "displayName": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "example": "Absa Bank Limited",
                                                        "description": "Display name for the Bank."
                                                    },
                                                    "defaultBranchCode": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "example": "632005",
                                                        "description": "Default bank branch code."
                                                    },
                                                    "swiftBIC": {
                                                        "type": "string",
                                                        "minLength": 1,
                                                        "example": "ABSAZAJJ",
                                                        "description": "Bank SWIFT BIC code."
                                                    }
                                                },
                                                "required": [
                                                    "code",
                                                    "name",
                                                    "displayName",
                                                    "defaultBranchCode",
                                                    "swiftBIC"
                                                ]
                                            },
                                            {
                                                "title": "CHIPS Generic Response Fields",
                                                "type": "object",
                                                "properties": {
                                                    "uuid": {
                                                        "type": "string",
                                                        "description": "The unique reference used to identify the token request.\n(UUID - ISO/IEC 9834-8:2014)",
                                                        "example": "d3adba08-7a54-46ec-bf03-8ce09cd38ee5",
                                                        "minLength": 36,
                                                        "maxLength": 36,
                                                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
                                                    },
                                                    "created": {
                                                        "type": "string",
                                                        "description": "The date and time that the token request was created.\nUTC Datetime with time zone\n(ISO8601 yyyy-mm-ddThh:mm:ss.nnnZ)",
                                                        "format": "date-time",
                                                        "example": "2020-04-14T16:31:43.715+02:00"
                                                    },
                                                    "createdBy": {
                                                        "type": "string",
                                                        "description": "Member UUID (ISO/IEC 9834-8:2014) or System",
                                                        "example": "System"
                                                    },
                                                    "createdByChannelUuid": {
                                                        "type": "string",
                                                        "description": "UUID of the authorization channel that issued the request.\n"
                                                    },
                                                    "lastModified": {
                                                        "type": "string",
                                                        "format": "date-time",
                                                        "example": "2020-04-14T16:31:43.715+02:00",
                                                        "description": "The date and time that the token request was last modified.\nUTC Datetime with time zone\n(ISO8601 yyyy-mm-ddThh:mm:ss.nnnZ)"
                                                    },
                                                    "modifiedBy": {
                                                        "type": "string",
                                                        "description": "Member UUID (ISO/IEC 9834-8:2014) or System",
                                                        "example": "System"
                                                    },
                                                    "systemRefInfo": {
                                                        "type": "string",
                                                        "description": "System reference number",
                                                        "minLength": 0,
                                                        "maxLength": 36
                                                    }
                                                },
                                                "required": [
                                                    "uuid",
                                                    "created",
                                                    "lastModified"
                                                ]
                                            }
                                        ],
                                        "title": "Bank Object",
                                        "x-tags": [
                                            "Banking"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    }
                },
                "operationId": "tpn-business-utilities-supportedbanks-get",
                "description": "Retrieve a filtered list of Banks supported in outgoing EFT operations.\n\nIf provided, a Query fields must be fully match the retrieve a filtered response.",
                "parameters": [
                    {
                        "type": "string",
                        "in": "header",
                        "name": "Authorization",
                        "description": "CHIPS Authorization"
                    },
                    {
                        "type": "string",
                        "in": "query",
                        "name": "code",
                        "description": "Human readable enumerartor to uniquely identify a bank."
                    },
                    {
                        "type": "string",
                        "in": "query",
                        "name": "name",
                        "description": "Name of the Bank."
                    },
                    {
                        "type": "string",
                        "in": "query",
                        "name": "branchCode",
                        "description": "Bank branch code."
                    },
                    {
                        "type": "string",
                        "in": "query",
                        "name": "swiftBIC",
                        "description": "SWIFT BIC Code for the bank."
                    },
                    {
                        "type": "string",
                        "description": "Marketplace API Key",
                        "name": "marketplaceKeyId",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Version of the API. (Latest version 1.0)",
                        "name": "version",
                        "in": "query",
                        "required": true
                    }
                ]
            },
            "parameters": []
        }
    },
    "definitions": {},
    "basePath": "/sandbox/chips/utils/banks",
    "tags": [
        {
            "name": "Account"
        },
        {
            "name": "Cash Funding"
        },
        {
            "name": "Instant EFT Funding"
        },
        {
            "name": "Send Funds"
        },
        {
            "name": "Cash Send"
        },
        {
            "name": "QR Payments"
        },
        {
            "name": "Payments"
        },
        {
            "name": "EFT Payments"
        },
        {
            "name": "Receive Payments"
        }
    ],
    "securityDefinitions": {
        "Marketplace API Key": {
            "type": "apiKey",
            "description": "API Key",
            "name": "marketplaceKeyId"
        },
        "in": "header"
    },
    "security": [
        {
            "Marketplace API Key": []
        }
    ],
    "buildtarget": "stoplight"
}