{
    "swagger": "2.0",
    "info": {
        "title": "CHIPS Money API",
        "version": "1.0",
        "license": {
            "name": " Apache 2.0 License",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "termsOfService": " https://marketplace.trustlinkhosting.com",
        "contact": {
            "name": "API Sales",
            "url": "https://marketplace.trustlinkhosting.com",
            "email": "apisales@trustlink.co.za"
        },
        "description": "The CHIPS Money API utilizes the CHIPS Payment Network that allows creation of user ecosystem via an App in order for users to convert cash to CHIPS at supported ATMs and Store, make CHIPS user to CHIPS user Payments, Scan to pay and code to pay at supported stores and convert CHIPS to cash at supported ATMs and stores.\n\n# Features\n\n![Account Details Icon](https://marketplace.trustlinkhosting.com/images/Providers/CHIPS/AccountDetails.png) \n\n* Check account balance and limits. [Try it!][flow-chips-account-details]\n\n![ATM Withdrawal Icon](https://marketplace.trustlinkhosting.com/images/Providers/CHIPS/ATMWithdrawal.png)\n\n* Allows sending an ATM Voucher for withdrawal at supported Bank ATMs. [Try it!][flow-chips-cashsends-atm]\n\n\n\n\n\n\n[flow-chips-account-details]: https://marketplace.trustlinkhosting.com/chips-account-details-flow\n[flow-chips-cashsends-atm]: https://marketplace.trustlinkhosting.com/chips-money-cashsends-atm-flow"
    },
    "host": "apim.trustlinkhosting.com:8065",
    "schemes": [
        "https"
    ],
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "paths": {
        "/cashsends/atm": {
            "post": {
                "summary": "SMS ATM Cash Voucher",
                "operationId": "chips-post-cashsend-atm",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "title": "CHIPS Cash Send 200 Success",
                            "type": "object",
                            "x-tags": [
                                "Cash Send"
                            ],
                            "description": "",
                            "properties": {
                                "uuid": {
                                    "description": "UUID (ISO/IEC 9834-8:201)",
                                    "maxLength": 36,
                                    "minLength": 36,
                                    "type": "string"
                                },
                                "transaction": {
                                    "description": "Cash send transactions",
                                    "type": "array",
                                    "items": {
                                        "description": "Cash send transactions",
                                        "type": "object",
                                        "properties": {
                                            "transactionType": {
                                                "description": "Transaction type",
                                                "enum": [
                                                    "COMMISSION",
                                                    "FEE",
                                                    "FUNDING",
                                                    "INTEREST",
                                                    "LIQUIDITY",
                                                    "PAYMENT",
                                                    "PAY_IN",
                                                    "PAY_OUT",
                                                    "REVERSAL"
                                                ],
                                                "type": "string"
                                            },
                                            "uuid": {
                                                "description": "Transaction UUID (ISO/IEC 9834-8:201)",
                                                "maxLength": 36,
                                                "minLength": 36,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "transactionType",
                                            "uuid"
                                        ]
                                    }
                                },
                                "status": {
                                    "description": "Status",
                                    "enum": [
                                        "CANCELLED",
                                        "FINALISED",
                                        "PENDING",
                                        "REVERSED"
                                    ],
                                    "type": "string"
                                },
                                "requestId": {
                                    "description": "External request identifier. Recommended UUID (ISO/IEC 9834-8:201)",
                                    "maxLength": 36,
                                    "minLength": 0,
                                    "type": "string",
                                    "x-nullable": true
                                },
                                "provider": {
                                    "description": "Cash send provider",
                                    "enum": [
                                        "FNB",
                                        "NEDBANK"
                                    ],
                                    "type": "string"
                                },
                                "payerRefInfo": {
                                    "description": "External reference to be displayed on the payers transaction history",
                                    "maxLength": 36,
                                    "minLength": 0,
                                    "type": "string"
                                },
                                "payerAccountUuid": {
                                    "description": "Payer account UUID (ISO/IEC 9834-8:201)",
                                    "maxLength": 36,
                                    "minLength": 36,
                                    "type": "string"
                                },
                                "modifiedBy": {
                                    "description": "Member UUID (ISO/IEC 9834-8:201)",
                                    "type": "string",
                                    "x-nullable": true
                                },
                                "mobileNumber": {
                                    "description": "Mobile number of the recipient",
                                    "maxLength": 15,
                                    "minLength": 0,
                                    "pattern": "^((\\+[1-9]?[0-9])|0)?[7-9][0-9]{9}$",
                                    "type": "string"
                                },
                                "lastModified": {
                                    "description": "Date and time last modified (ISO8601 yyyy-mm-ddThh:mm:ss.nnnZ)",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "createdBy": {
                                    "description": "Member UUID (ISO/IEC 9834-8:201)",
                                    "type": "string",
                                    "x-nullable": true
                                },
                                "created": {
                                    "description": "Date and time created (ISO8601 yyyy-mm-ddThh:mm:ss.nnnZ)",
                                    "format": "date-time",
                                    "type": "string"
                                },
                                "amount": {
                                    "description": "Amount",
                                    "exclusiveMinimum": true,
                                    "minimum": 0,
                                    "type": "number"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            },
                            "required": [
                                "uuid",
                                "status",
                                "provider",
                                "payerAccountUuid",
                                "lastModified",
                                "created",
                                "amount"
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "Send an SMS cash voucher that can be withdrawn at a Nedbank ATM.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "title": "CHIPS Cash Send Request",
                            "type": "object",
                            "description": "Payload to initiate a cash send that will result in an ATM withdrawal",
                            "x-tags": [
                                "Cash Send"
                            ],
                            "x-examples": {},
                            "properties": {
                                "requestId": {
                                    "type": "string",
                                    "description": "External request identifier.\nRecommended UUID (ISO/IEC 9834-8:2014)",
                                    "example": "7a7ef7ff-b599-40ba-9ede-68d542da53f4",
                                    "minLength": 0,
                                    "maxLength": 36
                                },
                                "payerRefInfo": {
                                    "type": "string",
                                    "description": "External reference to be displayed on the payers transaction history",
                                    "example": "atm-cashsend-00001",
                                    "minLength": 0,
                                    "maxLength": 36
                                },
                                "payerAccountUuid": {
                                    "type": "string",
                                    "description": "Payer account UUID (ISO/IEC 9834-8:2014)",
                                    "example": "582952d0-df77-4e1b-9d47-7fce0033dde0",
                                    "minLength": 36,
                                    "maxLength": 36
                                },
                                "mobileNumber": {
                                    "type": "string",
                                    "description": "Mobile number of the recipient",
                                    "example": "+27821231234",
                                    "minLength": 0,
                                    "maxLength": 15,
                                    "pattern": "^((\\+[1-9]?[0-9])|0)?[7-9][0-9]{9}$"
                                },
                                "amount": {
                                    "type": "number",
                                    "description": "Amount that with bewithdrawn. Must be a multiple of R \n10",
                                    "example": 250,
                                    "minimum": 10,
                                    "multipleOf": 10,
                                    "exclusiveMinimum": true
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Description for the transaction.",
                                    "example": "ATM Payment",
                                    "maxLength": 60
                                }
                            },
                            "required": [
                                "payerAccountUuid",
                                "mobileNumber",
                                "amount",
                                "description"
                            ]
                        }
                    },
                    {
                        "type": "string",
                        "in": "header",
                        "name": "Authorization",
                        "description": "See CHIPS Authorization Methods",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Marketplace API Key",
                        "name": "marketplaceKeyId",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Version of the API. (Latest version 1.0)",
                        "name": "version",
                        "in": "query",
                        "required": true
                    }
                ],
                "tags": [
                    "Cash Send"
                ]
            },
            "parameters": []
        },
        "/cashsends/atm/fees": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "description": "Amount on which fees should be calculated",
                        "in": "query",
                        "name": "amount",
                        "required": true,
                        "type": "number"
                    },
                    {
                        "type": "string",
                        "in": "header",
                        "name": "Authorization",
                        "description": "See CHIPS Authorization Methods"
                    },
                    {
                        "type": "string",
                        "description": "Marketplace API Key",
                        "name": "marketplaceKeyId",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Version of the API. (Latest version 1.0)",
                        "name": "version",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "description": "Fees attracted by the transaction",
                            "allOf": [
                                {
                                    "title": "CHIPS Fee Object",
                                    "type": "object",
                                    "description": "Generic object for CHIPS&reg; fees.",
                                    "properties": {
                                        "vatAmount": {
                                            "description": "VAT amount on total fee",
                                            "exclusiveMinimum": false,
                                            "minimum": 0,
                                            "type": "number"
                                        },
                                        "totalAmount": {
                                            "description": "Total fee amount",
                                            "exclusiveMinimum": false,
                                            "minimum": 0,
                                            "type": "number"
                                        },
                                        "internalAmount": {
                                            "description": "Internal fee amount",
                                            "exclusiveMinimum": false,
                                            "minimum": 0,
                                            "type": "number"
                                        },
                                        "externalAmount": {
                                            "description": "External fee amount",
                                            "exclusiveMinimum": false,
                                            "minimum": 0,
                                            "type": "number"
                                        }
                                    },
                                    "x-tags": [
                                        "Fees"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "apimStatus": {
                                            "type": "object",
                                            "title": "Status",
                                            "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                            "x-examples": {
                                                "Success": {
                                                    "apimStatus": {
                                                        "marketplaceCode": 200,
                                                        "marketplaceMsg": "Success",
                                                        "providerCode": "200",
                                                        "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                                    }
                                                },
                                                "Lookup failure": {
                                                    "apimStatus": {
                                                        "marketplaceCode": 200,
                                                        "marketplaceMsg": "Success",
                                                        "providerCode": "404",
                                                        "providerMsg": "Not Found",
                                                        "userMsg": "Item requested was not found",
                                                        "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                                    }
                                                },
                                                "Authorization Error": {
                                                    "apimStatus": {
                                                        "marketplaceCode": 401,
                                                        "marketplaceMsg": "Unauthorized",
                                                        "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                                    }
                                                }
                                            },
                                            "x-tags": [
                                                "API Marketplace Core"
                                            ],
                                            "properties": {
                                                "marketplaceCode": {
                                                    "type": "integer",
                                                    "example": 450,
                                                    "description": "Indicates status on the marketplace layer. ",
                                                    "title": "Markerplace layer status code"
                                                },
                                                "marketplaceMsg": {
                                                    "type": "string",
                                                    "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                                    "default": "Success",
                                                    "example": "An API subscription application for the requested URI was not found.",
                                                    "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                                },
                                                "providerCode": {
                                                    "type": "string",
                                                    "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                                    "example": "ERRDB04"
                                                },
                                                "providerMsg": {
                                                    "type": "string",
                                                    "example": "Table not found",
                                                    "description": "Error message passed by provider"
                                                },
                                                "userMsg": {
                                                    "type": "string",
                                                    "example": "Your cart was not found.",
                                                    "description": "User friendly message"
                                                },
                                                "statusCode": {
                                                    "type": "integer",
                                                    "description": "Same as the http status code",
                                                    "example": 200
                                                },
                                                "marketplaceId": {
                                                    "type": "string",
                                                    "description": "Marketplace request id for support and tracing queries.",
                                                    "example": "Id-ae65955ee8063fdc870e1758"
                                                },
                                                "marketplaceMocked": {
                                                    "type": "boolean",
                                                    "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                                }
                                            },
                                            "required": [
                                                "statusCode",
                                                "marketplaceId"
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Cash Send"
                ],
                "operationId": "chips_get_cash_send_atm_fees",
                "summary": "Calculate cash send fees",
                "description": "Calculate the fees the sender will have to pay to send money for withdrawal at the ATM."
            },
            "parameters": []
        },
        "/accounts/{uuid}": {
            "get": {
                "summary": "Get Account Details",
                "tags": [
                    "Account"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "title": "Account Details",
                                    "type": "object",
                                    "description": "",
                                    "x-tags": [
                                        "Account"
                                    ],
                                    "properties": {
                                        "uuid": {
                                            "description": "UUID (ISO/IEC 9834-8:201)",
                                            "maxLength": 36,
                                            "minLength": 36,
                                            "type": "string"
                                        },
                                        "transactionLimitAmount": {
                                            "description": "Maximum amount per transaction",
                                            "type": "number"
                                        },
                                        "requestId": {
                                            "description": "External request identifier. Recommended UUID (ISO/IEC 9834-8:201)",
                                            "maxLength": 36,
                                            "minLength": 0,
                                            "type": "string",
                                            "x-nullable": true
                                        },
                                        "modifiedBy": {
                                            "description": "Member UUID (ISO/IEC 9834-8:201)",
                                            "type": "string",
                                            "x-nullable": true
                                        },
                                        "memberUuid": {
                                            "description": "Member UUID (ISO/IEC 9834-8:201)",
                                            "maxLength": 36,
                                            "minLength": 36,
                                            "type": "string"
                                        },
                                        "lastModified": {
                                            "description": "Date and time last modified (ISO8601 yyyy-mm-ddThh:mm:ss.nnnZ)",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dailyLimitAmount": {
                                            "description": "Maximum amount available per day",
                                            "exclusiveMinimum": false,
                                            "minimum": 0,
                                            "type": "number"
                                        },
                                        "createdBy": {
                                            "description": "Member UUID (ISO/IEC 9834-8:201)",
                                            "type": "string",
                                            "x-nullable": true
                                        },
                                        "created": {
                                            "description": "Date and time created (ISO8601 yyyy-mm-ddThh:mm:ss.nnnZ)",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "availableDailyAmount": {
                                            "description": "Remaining amount available for current day",
                                            "exclusiveMinimum": false,
                                            "minimum": 0,
                                            "type": "number"
                                        },
                                        "availableBalanceAmount": {
                                            "description": "Available balance amount",
                                            "exclusiveMinimum": false,
                                            "minimum": 0,
                                            "type": "number"
                                        },
                                        "autoLimitAmount": {
                                            "description": "Automatic limit amount",
                                            "exclusiveMinimum": false,
                                            "minimum": 0,
                                            "type": "number"
                                        },
                                        "approveLimitAmount": {
                                            "description": "Approved limit amount",
                                            "exclusiveMinimum": false,
                                            "minimum": 0,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "uuid",
                                        "memberUuid",
                                        "lastModified",
                                        "created"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "apimStatus": {
                                            "type": "object",
                                            "title": "Status",
                                            "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                            "x-examples": {
                                                "Success": {
                                                    "apimStatus": {
                                                        "marketplaceCode": 200,
                                                        "marketplaceMsg": "Success",
                                                        "providerCode": "200",
                                                        "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                                    }
                                                },
                                                "Lookup failure": {
                                                    "apimStatus": {
                                                        "marketplaceCode": 200,
                                                        "marketplaceMsg": "Success",
                                                        "providerCode": "404",
                                                        "providerMsg": "Not Found",
                                                        "userMsg": "Item requested was not found",
                                                        "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                                    }
                                                },
                                                "Authorization Error": {
                                                    "apimStatus": {
                                                        "marketplaceCode": 401,
                                                        "marketplaceMsg": "Unauthorized",
                                                        "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                                    }
                                                }
                                            },
                                            "x-tags": [
                                                "API Marketplace Core"
                                            ],
                                            "properties": {
                                                "marketplaceCode": {
                                                    "type": "integer",
                                                    "example": 450,
                                                    "description": "Indicates status on the marketplace layer. ",
                                                    "title": "Markerplace layer status code"
                                                },
                                                "marketplaceMsg": {
                                                    "type": "string",
                                                    "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                                    "default": "Success",
                                                    "example": "An API subscription application for the requested URI was not found.",
                                                    "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                                },
                                                "providerCode": {
                                                    "type": "string",
                                                    "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                                    "example": "ERRDB04"
                                                },
                                                "providerMsg": {
                                                    "type": "string",
                                                    "example": "Table not found",
                                                    "description": "Error message passed by provider"
                                                },
                                                "userMsg": {
                                                    "type": "string",
                                                    "example": "Your cart was not found.",
                                                    "description": "User friendly message"
                                                },
                                                "statusCode": {
                                                    "type": "integer",
                                                    "description": "Same as the http status code",
                                                    "example": 200
                                                },
                                                "marketplaceId": {
                                                    "type": "string",
                                                    "description": "Marketplace request id for support and tracing queries.",
                                                    "example": "Id-ae65955ee8063fdc870e1758"
                                                },
                                                "marketplaceMocked": {
                                                    "type": "boolean",
                                                    "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                                }
                                            },
                                            "required": [
                                                "statusCode",
                                                "marketplaceId"
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "title": "Status",
                            "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                            "x-examples": {
                                "Success": {
                                    "apimStatus": {
                                        "marketplaceCode": 200,
                                        "marketplaceMsg": "Success",
                                        "providerCode": "200",
                                        "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                    }
                                },
                                "Lookup failure": {
                                    "apimStatus": {
                                        "marketplaceCode": 200,
                                        "marketplaceMsg": "Success",
                                        "providerCode": "404",
                                        "providerMsg": "Not Found",
                                        "userMsg": "Item requested was not found",
                                        "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                    }
                                },
                                "Authorization Error": {
                                    "apimStatus": {
                                        "marketplaceCode": 401,
                                        "marketplaceMsg": "Unauthorized",
                                        "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                    }
                                }
                            },
                            "x-tags": [
                                "API Marketplace Core"
                            ],
                            "properties": {
                                "marketplaceCode": {
                                    "type": "integer",
                                    "example": 450,
                                    "description": "Indicates status on the marketplace layer. ",
                                    "title": "Markerplace layer status code"
                                },
                                "marketplaceMsg": {
                                    "type": "string",
                                    "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                    "default": "Success",
                                    "example": "An API subscription application for the requested URI was not found.",
                                    "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                },
                                "providerCode": {
                                    "type": "string",
                                    "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                    "example": "ERRDB04"
                                },
                                "providerMsg": {
                                    "type": "string",
                                    "example": "Table not found",
                                    "description": "Error message passed by provider"
                                },
                                "userMsg": {
                                    "type": "string",
                                    "example": "Your cart was not found.",
                                    "description": "User friendly message"
                                },
                                "statusCode": {
                                    "type": "integer",
                                    "description": "Same as the http status code",
                                    "example": 200
                                },
                                "marketplaceId": {
                                    "type": "string",
                                    "description": "Marketplace request id for support and tracing queries.",
                                    "example": "Id-ae65955ee8063fdc870e1758"
                                },
                                "marketplaceMocked": {
                                    "type": "boolean",
                                    "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                }
                            },
                            "required": [
                                "statusCode",
                                "marketplaceId"
                            ]
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    }
                },
                "operationId": "chips-get-account",
                "description": "Get account details including balance.\n\n**Testing on Storefront and Sandbox**\n\nThe following uuid will have the following mocked responses for [Storefront][How to call a storefront API] and Sandbox APIs. \n\n| uuid | status |availableBalanceAmount |  \n|---|:---:|---:|\n| 0cd75155-6e60-4471-b0b1-4563ab36676c | 200 | 345.05 |\n| fbb9f3a7-402f-432d-8293-d3c0f63d3c4d | 200 | 1234.56 |\n| 87d2e18b-fc62-4400-bb0c-24342218b1b9 | 404 |  |\n| 3b814435-02cb-43da-9869-1c90f8e9aa4e | 404 | |\n\n\n[How to call a storefront API]: https://stoplight.io/p/docs/gh/trustlink-apim/chips/docs/06-how-it-works.md?srn=gh/trustlink-apim/chips/docs/06-how-it-works.md#storefront-apis",
                "parameters": [
                    {
                        "type": "string",
                        "in": "header",
                        "name": "Authorization",
                        "description": "See CHIPS Authorization Methods",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Marketplace API Key",
                        "name": "marketplaceKeyId",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Version of the API. (Latest version 1.0)",
                        "name": "version",
                        "in": "query",
                        "required": true
                    }
                ]
            },
            "parameters": [
                {
                    "type": "string",
                    "name": "uuid",
                    "in": "path",
                    "required": true,
                    "description": "CHIPS User Profile UUID",
                    "maxLength": 36,
                    "minLength": 36,
                    "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
                }
            ]
        },
        "/payments/purchases": {
            "post": {
                "summary": "Purchase from Merchant",
                "operationId": "chips-money-purchase-post",
                "responses": {
                    "200": {
                        "description": "CHIPS Purchase Transaction Response",
                        "schema": {
                            "allOf": [
                                {
                                    "title": "CHIPS Generic Response Fields",
                                    "type": "object",
                                    "properties": {
                                        "uuid": {
                                            "type": "string",
                                            "description": "The unique reference used to identify the token request.\n(UUID - ISO/IEC 9834-8:2014)",
                                            "example": "d3adba08-7a54-46ec-bf03-8ce09cd38ee5",
                                            "minLength": 36,
                                            "maxLength": 36,
                                            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
                                        },
                                        "created": {
                                            "type": "string",
                                            "description": "The date and time that the token request was created.\nUTC Datetime with time zone\n(ISO8601 yyyy-mm-ddThh:mm:ss.nnnZ)",
                                            "format": "date-time",
                                            "example": "2020-04-14T16:31:43.715+02:00"
                                        },
                                        "createdBy": {
                                            "type": "string",
                                            "description": "Member UUID (ISO/IEC 9834-8:2014) or System",
                                            "example": "System"
                                        },
                                        "lastModified": {
                                            "type": "string",
                                            "format": "date-time",
                                            "example": "2020-04-14T16:31:43.715+02:00",
                                            "description": "The date and time that the token request was last modified.\nUTC Datetime with time zone\n(ISO8601 yyyy-mm-ddThh:mm:ss.nnnZ)"
                                        },
                                        "modifiedBy": {
                                            "type": "string",
                                            "description": "Member UUID (ISO/IEC 9834-8:2014) or System",
                                            "example": "System"
                                        },
                                        "systemRefInfo": {
                                            "type": "string",
                                            "description": "System reference number",
                                            "minLength": 0,
                                            "maxLength": 36
                                        }
                                    },
                                    "required": [
                                        "uuid",
                                        "created",
                                        "lastModified",
                                        "systemRefInfo"
                                    ]
                                },
                                {
                                    "title": "CHIPS Payment Input - Payee Details",
                                    "type": "object",
                                    "description": "Model for the Payee fields of a CHIPS payment.\nPlease see details per end-point. In some cases the required fields and usage of fields might differ.",
                                    "properties": {
                                        "payeeAccountUuid": {
                                            "maxLength": 36,
                                            "minLength": 36,
                                            "type": "string",
                                            "description": "Payee account UUID in the CHIPS Payment Network. Searchable.",
                                            "example": "8ef11c5a-160f-4cbd-991c-43c5d4beaab4"
                                        },
                                        "payeeRefInfo": {
                                            "type": "string",
                                            "description": "A reference provided by the payee, application or external system to identify the purpose of the payment. Searchable.",
                                            "example": "online-20200305-INV123304",
                                            "minLength": 0,
                                            "maxLength": 36
                                        },
                                        "payeeMessage": {
                                            "maxLength": 120,
                                            "minLength": 0,
                                            "type": "string",
                                            "description": "Message supplied by the payee.",
                                            "example": "Please arrange delivery on a Friday"
                                        },
                                        "siteRefInfo": {
                                            "type": "string",
                                            "description": "A reference provided by the application or external system to identify the specific business unit or paypoint.",
                                            "example": "ONLINE-GROC",
                                            "minLength": 0,
                                            "maxLength": 36
                                        },
                                        "siteName": {
                                            "type": "string",
                                            "description": "A description provided by the application or external system to label the site where the payment originates.",
                                            "example": "The Web Shop",
                                            "minLength": 0,
                                            "maxLength": 100
                                        },
                                        "payeeCategory1": {
                                            "type": "string",
                                            "description": "Field to categorize the transaction from the Payee point of view.",
                                            "example": "Online",
                                            "minLength": 0,
                                            "maxLength": 50
                                        },
                                        "payeeCategory2": {
                                            "type": "string",
                                            "description": "Field to categorize the transaction from the Payee point of view.",
                                            "example": "Food",
                                            "minLength": 0,
                                            "maxLength": 50
                                        },
                                        "payeeCategory3": {
                                            "type": "string",
                                            "description": "Field to categorize the transaction from the Payee point of view.",
                                            "example": "Canned Goods",
                                            "minLength": 0,
                                            "maxLength": 50
                                        }
                                    },
                                    "required": [
                                        "payeeAccountUuid",
                                        "payeeRefInfo"
                                    ]
                                },
                                {
                                    "title": "CHIPS Payment Input - Payer Details",
                                    "type": "object",
                                    "description": "Model for the Payer fields of a CHIPS payment.\nPlease see details per end-point. In some cases the required fields and usage of fields might differ.",
                                    "properties": {
                                        "payerAccountUuid": {
                                            "maxLength": 36,
                                            "minLength": 36,
                                            "type": "string",
                                            "description": "Payer account UUID in the CHIPS Payment Network. Searchable.",
                                            "example": "b4a90a07-c197-408b-8419-ba3ed7ab3f8e"
                                        },
                                        "payerRefInfo": {
                                            "type": "string",
                                            "description": "A reference provided by the payer, application or external system to identify the purpose of the payment. Searchable.",
                                            "example": "Groceries 20201003",
                                            "minLength": 0,
                                            "maxLength": 36
                                        },
                                        "payerCategory1": {
                                            "type": "string",
                                            "description": "Field to categorize the transaction from the Payer point of view.",
                                            "example": "Online",
                                            "minLength": 0,
                                            "maxLength": 50
                                        },
                                        "payerCategory2": {
                                            "type": "string",
                                            "description": "Field to categorize the transaction from the Payer point of view.",
                                            "example": "Food",
                                            "minLength": 0,
                                            "maxLength": 50
                                        },
                                        "payerCategory3": {
                                            "type": "string",
                                            "description": "Field to categorize the transaction from the Payer point of view.",
                                            "example": "Canned Goods",
                                            "minLength": 0,
                                            "maxLength": 50
                                        }
                                    },
                                    "required": [
                                        "payerAccountUuid",
                                        "payerRefInfo"
                                    ]
                                },
                                {
                                    "title": "CHIPS Payment Input - Transaction Details",
                                    "type": "object",
                                    "description": "",
                                    "properties": {
                                        "requestId": {
                                            "maxLength": 36,
                                            "minLength": 0,
                                            "type": "string",
                                            "description": "External request identifier. Recommended UUID",
                                            "example": "c070567d-da4d-4e4e-a5a5-0f9dbd516042"
                                        },
                                        "amount": {
                                            "minimum": 0,
                                            "exclusiveMinimum": false,
                                            "type": "number",
                                            "description": "Transaction amount"
                                        },
                                        "gratuityAmount": {
                                            "minimum": 0,
                                            "exclusiveMinimum": false,
                                            "type": "number",
                                            "description": "Gratuity amount"
                                        }
                                    },
                                    "required": [
                                        "amount"
                                    ]
                                },
                                {
                                    "title": "CHIPS Transaction Response Fields",
                                    "type": "object",
                                    "properties": {
                                        "paymentDate": {
                                            "type": "string",
                                            "description": "Informational field indicating the date by when the payment is due.\n(ISO8601 yyyy-mm-dd)",
                                            "format": "date",
                                            "example": "2021-11-30"
                                        },
                                        "description": {
                                            "type": "string",
                                            "description": "Description for the transaction. Will be displayed to the scanner of the QR code.",
                                            "example": "Online Cart Checkout",
                                            "minLength": 0,
                                            "maxLength": 60
                                        },
                                        "feeSponsorType": {
                                            "type": "string",
                                            "enum": [
                                                "PAYER",
                                                "PAYEE"
                                            ],
                                            "example": "PAYER",
                                            "description": "Indicator of who is paying the fee for the transfer. \n- If PAYER, then the amount deducted from the PAYER is *amount + fee*. The PAYEE receives *amount*. \n- If PAYEE, then the aomunt deducted from the PAYER is *amount*. The PAYEE receives *amount - fee* "
                                        },
                                        "paymentType": {
                                            "type": "string",
                                            "enum": [
                                                "BULK",
                                                "CARD",
                                                "DEFAULT"
                                            ],
                                            "description": "Payment type Enum: [ BULK, CARD, DEFAULT ]"
                                        },
                                        "status": {
                                            "type": "string",
                                            "description": "The status of the token. See enum for valid values.",
                                            "enum": [
                                                "COMPLETED",
                                                "EXPIRED",
                                                "FAILED",
                                                "PENDING",
                                                "REJECTED",
                                                "REVERSED"
                                            ],
                                            "example": "PENDING"
                                        }
                                    },
                                    "required": [
                                        "paymentDate",
                                        "description",
                                        "feeSponsorType",
                                        "paymentType",
                                        "status"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "apimStatus": {
                                            "type": "object",
                                            "title": "Status",
                                            "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                            "x-examples": {
                                                "Success": {
                                                    "apimStatus": {
                                                        "marketplaceCode": 200,
                                                        "marketplaceMsg": "Success",
                                                        "providerCode": "200",
                                                        "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                                    }
                                                },
                                                "Lookup failure": {
                                                    "apimStatus": {
                                                        "marketplaceCode": 200,
                                                        "marketplaceMsg": "Success",
                                                        "providerCode": "404",
                                                        "providerMsg": "Not Found",
                                                        "userMsg": "Item requested was not found",
                                                        "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                                    }
                                                },
                                                "Authorization Error": {
                                                    "apimStatus": {
                                                        "marketplaceCode": 401,
                                                        "marketplaceMsg": "Unauthorized",
                                                        "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                                    }
                                                }
                                            },
                                            "x-tags": [
                                                "API Marketplace Core"
                                            ],
                                            "properties": {
                                                "marketplaceCode": {
                                                    "type": "integer",
                                                    "example": 450,
                                                    "description": "Indicates status on the marketplace layer. ",
                                                    "title": "Markerplace layer status code"
                                                },
                                                "marketplaceMsg": {
                                                    "type": "string",
                                                    "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                                    "default": "Success",
                                                    "example": "An API subscription application for the requested URI was not found.",
                                                    "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                                },
                                                "providerCode": {
                                                    "type": "string",
                                                    "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                                    "example": "ERRDB04"
                                                },
                                                "providerMsg": {
                                                    "type": "string",
                                                    "example": "Table not found",
                                                    "description": "Error message passed by provider"
                                                },
                                                "userMsg": {
                                                    "type": "string",
                                                    "example": "Your cart was not found.",
                                                    "description": "User friendly message"
                                                },
                                                "statusCode": {
                                                    "type": "integer",
                                                    "description": "Same as the http status code",
                                                    "example": 200
                                                },
                                                "marketplaceId": {
                                                    "type": "string",
                                                    "description": "Marketplace request id for support and tracing queries.",
                                                    "example": "Id-ae65955ee8063fdc870e1758"
                                                },
                                                "marketplaceMocked": {
                                                    "type": "boolean",
                                                    "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                                }
                                            },
                                            "required": [
                                                "statusCode",
                                                "marketplaceId"
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    },
                    "429": {
                        "description": "Too Many Requests",
                        "schema": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "title": "CHIPS Error",
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string"
                                },
                                "code": {
                                    "type": "string"
                                },
                                "description": {
                                    "type": "string"
                                },
                                "apimStatus": {
                                    "type": "object",
                                    "title": "Status",
                                    "description": "All responses from the marketplace will at least contain the *apimStatus* object.  The purpose is to inform the requester of status details above and beyond the HTTP status code.\n\nNote that it is possible to have a success indicator on the marketplace layer, but have a unsuccessful indication on the *providerCode*. This in essence means that even if the API to the provider returned for example a 'not found' result, the request is still chargable on the marketplace layer.\n\nThe *providerCode* will only be present if the API was routed to the API Provider.\n\n## Marketplace Codes\n\n| Code | Description |\n|------|---------------|\n| 200 | Successfully serviced and charged. |\n| 250 | Successfully serviced with no charge. |\n| 401 | Unauthorized.  |\n| 404 | Not Found. |\n| 450 | Application Not Found. |\n| 451 | Organization Not Found. |\n| 500 | Internal Server Error. | \n\n\n\n",
                                    "x-examples": {
                                        "Success": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "200",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Lookup failure": {
                                            "apimStatus": {
                                                "marketplaceCode": 200,
                                                "marketplaceMsg": "Success",
                                                "providerCode": "404",
                                                "providerMsg": "Not Found",
                                                "userMsg": "Item requested was not found",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        },
                                        "Authorization Error": {
                                            "apimStatus": {
                                                "marketplaceCode": 401,
                                                "marketplaceMsg": "Unauthorized",
                                                "marketplaceId": "Id-ae65955ee8063fdc870e1758"
                                            }
                                        }
                                    },
                                    "x-tags": [
                                        "API Marketplace Core"
                                    ],
                                    "properties": {
                                        "marketplaceCode": {
                                            "type": "integer",
                                            "example": 450,
                                            "description": "Indicates status on the marketplace layer. ",
                                            "title": "Markerplace layer status code"
                                        },
                                        "marketplaceMsg": {
                                            "type": "string",
                                            "title": "Human readable message to provide more details on the *marketplaceCode*.",
                                            "default": "Success",
                                            "example": "An API subscription application for the requested URI was not found.",
                                            "description": "Human readable description providing details about the error. On success the value will be 'Success'"
                                        },
                                        "providerCode": {
                                            "type": "string",
                                            "description": "Error code returned API provider. The value is of type string seeing as the prodiver might respond with a string error code like 'ERRDB01'",
                                            "example": "ERRDB04"
                                        },
                                        "providerMsg": {
                                            "type": "string",
                                            "example": "Table not found",
                                            "description": "Error message passed by provider"
                                        },
                                        "userMsg": {
                                            "type": "string",
                                            "example": "Your cart was not found.",
                                            "description": "User friendly message"
                                        },
                                        "statusCode": {
                                            "type": "integer",
                                            "description": "Same as the http status code",
                                            "example": 200
                                        },
                                        "marketplaceId": {
                                            "type": "string",
                                            "description": "Marketplace request id for support and tracing queries.",
                                            "example": "Id-ae65955ee8063fdc870e1758"
                                        },
                                        "marketplaceMocked": {
                                            "type": "boolean",
                                            "description": "Indicates if the response was generated by a marketplace mockup. This is only relevant to API that start with the /storefront and /sandbox paths. \nIf true, the API was not passed on to the API provider backend, but the response is being mocked up the marketplace.\nIf false, it indicates that the API call was pushed through to the API provider backend. The backend in turn might have stubbed the response in order to prevent costs like SMS notifications. "
                                        }
                                    },
                                    "required": [
                                        "statusCode",
                                        "marketplaceId"
                                    ]
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "allOf": [
                                {
                                    "title": "CHIPS Payment Input - Payee Details",
                                    "type": "object",
                                    "description": "Model for the Payee fields of a CHIPS payment.\nPlease see details per end-point. In some cases the required fields and usage of fields might differ.",
                                    "properties": {
                                        "payeeAccountUuid": {
                                            "maxLength": 36,
                                            "minLength": 36,
                                            "type": "string",
                                            "description": "Payee account UUID in the CHIPS Payment Network. Searchable.",
                                            "example": "8ef11c5a-160f-4cbd-991c-43c5d4beaab4"
                                        },
                                        "payeeRefInfo": {
                                            "type": "string",
                                            "description": "A reference provided by the payee, application or external system to identify the purpose of the payment. Searchable.",
                                            "example": "online-20200305-INV123304",
                                            "minLength": 0,
                                            "maxLength": 36
                                        },
                                        "payeeMessage": {
                                            "maxLength": 120,
                                            "minLength": 0,
                                            "type": "string",
                                            "description": "Message supplied by the payee.",
                                            "example": "Please arrange delivery on a Friday"
                                        },
                                        "siteRefInfo": {
                                            "type": "string",
                                            "description": "A reference provided by the application or external system to identify the specific business unit or paypoint.",
                                            "example": "ONLINE-GROC",
                                            "minLength": 0,
                                            "maxLength": 36
                                        },
                                        "siteName": {
                                            "type": "string",
                                            "description": "A description provided by the application or external system to label the site where the payment originates.",
                                            "example": "The Web Shop",
                                            "minLength": 0,
                                            "maxLength": 100
                                        },
                                        "payeeCategory1": {
                                            "type": "string",
                                            "description": "Field to categorize the transaction from the Payee point of view.",
                                            "example": "Online",
                                            "minLength": 0,
                                            "maxLength": 50
                                        },
                                        "payeeCategory2": {
                                            "type": "string",
                                            "description": "Field to categorize the transaction from the Payee point of view.",
                                            "example": "Food",
                                            "minLength": 0,
                                            "maxLength": 50
                                        },
                                        "payeeCategory3": {
                                            "type": "string",
                                            "description": "Field to categorize the transaction from the Payee point of view.",
                                            "example": "Canned Goods",
                                            "minLength": 0,
                                            "maxLength": 50
                                        }
                                    },
                                    "required": [
                                        "payeeAccountUuid",
                                        "payeeRefInfo"
                                    ]
                                },
                                {
                                    "title": "CHIPS Payment Input - Payer Details",
                                    "type": "object",
                                    "description": "Model for the Payer fields of a CHIPS payment.\nPlease see details per end-point. In some cases the required fields and usage of fields might differ.",
                                    "properties": {
                                        "payerAccountUuid": {
                                            "maxLength": 36,
                                            "minLength": 36,
                                            "type": "string",
                                            "description": "Payer account UUID in the CHIPS Payment Network. Searchable.",
                                            "example": "b4a90a07-c197-408b-8419-ba3ed7ab3f8e"
                                        },
                                        "payerRefInfo": {
                                            "type": "string",
                                            "description": "A reference provided by the payer, application or external system to identify the purpose of the payment. Searchable.",
                                            "example": "Groceries 20201003",
                                            "minLength": 0,
                                            "maxLength": 36
                                        },
                                        "payerCategory1": {
                                            "type": "string",
                                            "description": "Field to categorize the transaction from the Payer point of view.",
                                            "example": "Online",
                                            "minLength": 0,
                                            "maxLength": 50
                                        },
                                        "payerCategory2": {
                                            "type": "string",
                                            "description": "Field to categorize the transaction from the Payer point of view.",
                                            "example": "Food",
                                            "minLength": 0,
                                            "maxLength": 50
                                        },
                                        "payerCategory3": {
                                            "type": "string",
                                            "description": "Field to categorize the transaction from the Payer point of view.",
                                            "example": "Canned Goods",
                                            "minLength": 0,
                                            "maxLength": 50
                                        }
                                    },
                                    "required": [
                                        "payerAccountUuid",
                                        "payerRefInfo"
                                    ]
                                },
                                {
                                    "title": "CHIPS Payment Input - Transaction Details",
                                    "type": "object",
                                    "description": "",
                                    "properties": {
                                        "requestId": {
                                            "maxLength": 36,
                                            "minLength": 0,
                                            "type": "string",
                                            "description": "External request identifier. Recommended UUID",
                                            "example": "c070567d-da4d-4e4e-a5a5-0f9dbd516042"
                                        },
                                        "amount": {
                                            "minimum": 0,
                                            "exclusiveMinimum": false,
                                            "type": "number",
                                            "description": "Transaction amount"
                                        },
                                        "gratuityAmount": {
                                            "minimum": 0,
                                            "exclusiveMinimum": false,
                                            "type": "number",
                                            "description": "Gratuity amount"
                                        }
                                    },
                                    "required": [
                                        "amount"
                                    ]
                                }
                            ]
                        },
                        "description": ""
                    },
                    {
                        "type": "string",
                        "description": "Marketplace API Key",
                        "name": "marketplaceKeyId",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Version of the API. (Latest version 1.0)",
                        "name": "version",
                        "in": "query",
                        "required": true
                    }
                ],
                "description": "Purchase payment to any of the CHIPS merchants in the eco system.",
                "tags": [
                    "Payments"
                ]
            },
            "parameters": []
        }
    },
    "definitions": {},
    "basePath": "/sandbox/chips/money",
    "tags": [
        {
            "name": "Account"
        },
        {
            "name": "Cash Send"
        },
        {
            "name": "Payments"
        }
    ],
    "securityDefinitions": {
        "Marketplace API Key": {
            "type": "apiKey",
            "description": "API Key",
            "name": "marketplaceKeyId"
        },
        "in": "header"
    },
    "security": [
        {
            "Marketplace API Key": []
        }
    ],
    "buildtarget": "stoplight"
}